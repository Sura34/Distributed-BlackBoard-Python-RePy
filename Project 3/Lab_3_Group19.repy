# Lab 3
#    * We removed the leader election and are instead going to make use of Eventual Redundancy
#    
#    * Changed from showing the local runtimes to showing the value of the logical clock in the message
#
#    New things on Lab 3: 
#    * The function eventual_consistency must check the timestamps of all messages and order them correctly.
#        - Since all nodes have the same timestamps in the messages, they will reach consistency.
#


# ------------------------------------------------------------------------------   
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------   
def start_board():
  ip = mycontext['ip']
  port = mycontext['port']
  print "Listening on IP " + str(ip) +" port " + str(port)
  try: 
    listencommhandle = waitforconn(ip, port, board_connection_handler)
  #default exception handler to override when we will work with a lot of sockets.
  except Exception, e:
    print "Exception in start_board: %s, %s\n" %(type(e), e)
    raise
    #pass
# ------------------------------------------------------------------------------   
# Used for swapping place of the two specified indexes in our messagelist
# ------------------------------------------------------------------------------      
def swapMessages(indexA, indexB):
    if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Entered function swapMessages()***"
    
    #Perform a simple swap
    temp = mycontext['msgList'][indexA]
    mycontext['msgList'][indexA] = mycontext['msgList'][indexB]
    mycontext['msgList'][indexB] = temp
    
    mycontext['lastSwap'] = getruntime()
    if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Exited function swapMessages()***\n\n"
    
# When updating the messagelist, we call this function to make sure all agree on a clock value.
# What happens is that we simply send a tiny message with our current clock value to each node.
def updateAllClocks():
    if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Entered function updateAllClocks()***\n\n"
    
    msgToSend = ""
    msgToSend += "<clockValue>"
    msgToSend += str(mycontext['logClock'])
    
  
    #We loop through it to connect to all vessels (ourselves excluded)
    #Then send an update to each vessel
    for line in file("neighborlist.txt","r"):           
        if line.strip() != mycontext['ip']:
            if mycontext['reporting']:
                print "sending update to: " + neighbors
                
            socket1 = openconn(line.strip(), 63178)
            socket1.send(msgToSend)
            socket1.close()

    if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Exited function updateAllClocks()***\n\n"
  
   
# Gets called by the other nodes
# as a result of receiving the "<clockValue>" message from the updateAllClocks()-function.
# Input "otherClock" is the timestamp received in the message
def compareClocks(otherClock):
    if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Entered function compareClocks()***\n\n"
    
    mycontext['lock'].acquire()
    
    if otherClock > mycontext["logClock"]:
        #Synchronize
        print "Someone else had a higher clock value, synchronize"
        mycontext["logClock"] = otherClock
    
    mycontext['lock'].release()
    
    if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Exited function compareClocks()***\n\n"

# Gets called after a timeout timer of a set amount of time
# Will make sure all messages are in the right order, both with respect to timestamps and IP-addresses
def eventual_consistency():
    if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Entered function eventual_consistency()***\n\n"
    
    # Do a check if the list is empty. If not empty, sort it and put all entries in the correct index
    if not mycontext['msgList']:
        if mycontext['reporting']:
            print "List is empty\n"
    else:
        # A loop that will go through our list of messages and check that all timestamps are in the correct ascending order
        counter = 0;
        for entry in mycontext['msgList']:
            print "Comparing timestamps in " + str(counter) + " and " + str(counter+1)
            # Check that both indexes exist (i.e. not at the end of list)
            if counter+1 != len(mycontext['msgList']):   
                # Get the timestamps from the two messages to compare 
                timestampA = int(mycontext['msgList'][counter][1].split("<")[1].split(">")[0])
                timestampB = int(mycontext['msgList'][counter+1][1].split("<")[1].split(">")[0])
                
                # Check to see if the two timestamps are equal
                if timestampA > timestampB:
                    # If timestampA is bigger, it means they are in the wrong order and needs to be swapped
                    print "Need to swap index " + str(counter) + " and " + str(counter+1) + ", timestamps in wrong order"
                    swapMessages(counter, counter+1)                  
                        
                else:
                    if mycontext['reporting']:
                        print "Timestamps need not be swapped"
                
                counter = counter + 1
                
            else:
                if mycontext['reporting']:
                    print "Reached end of list  <timestamps>"
        
        # A loop that will go through our list of messages and check all messages with same timestamp.
        # It will swap messages around if they are in the wrong order, according to IP
        counter = 0;
        for entry in mycontext['msgList']:
            if mycontext['reporting']:
                print "\nComparing messages " + str(counter) + " and " + str(counter+1)  
            # Check that both indexes exist (i.e. not at the end of list)
            if counter+1 != len(mycontext['msgList']):
                # Get the timestamps from the two messages to compare 
                timestampA = int(mycontext['msgList'][counter][1].split("<")[1].split(">")[0])
                timestampB = int(mycontext['msgList'][counter+1][1].split("<")[1].split(">")[0])
                
                # Check to see if the two timestamps are equal
                if timestampA == timestampB:
                    # If timestamps are equal, the highest IP-address wins
                    addressA = mycontext['msgList'][counter][1].split("> ").pop().split(":")[0].replace('.', '')
                    if mycontext['reporting']:
                        print "<" + str(timestampA) + ">" + " addressA == " + addressA
                    
                    addressB = mycontext['msgList'][counter+1][1].split("> ").pop().split(":")[0].replace('.', '')
                    if mycontext['reporting']:
                        print "<" + str(timestampB) + ">" + " addressB == " + addressB
                    
                    # If the second address is higher, it's message should come first
                    if int(addressB) > int(addressA):
                        if mycontext['reporting']:
                            print "Need to swap index " + str(counter) + " and " + str(counter+1) + ", messages in wrong order"
                        swapMessages(counter, counter+1)
                    else:
                        if mycontext['reporting']:
                            print "Messages in correct order, according to IP"
                        
                else:
                    if mycontext['reporting']:
                        print "Timestamps not identical"
                    
                counter = counter + 1
            else:
                if mycontext['reporting']:
                    print "Reached end of list  <messages>"
            
    
        #Rebuild the updated message from the sorted list and reach consistency
        newMessage = ""
        for entry in mycontext['msgList']:
            newMessage += entry[1]
        
        mycontext['msg'] = newMessage
        htmlresponse = generate_html_page()
    if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Exited function eventual_consistency()***\n\n"        
# Whenever we do a POST, or someone else does, this function gets called to determine that 
# messages timestamp and update our clock accordingly.
def updateLogClock(lastMessage):
    if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Entered function updateLogClock()***\n\n"
    
    #If the message is not empty, it means we did not do the POST.
    if(lastMessage != ""):
        if mycontext['reporting']:
            print "Someone else Posted"
        
        timestamp = int(lastMessage.split(">")[0][1:])
        if mycontext['reporting']:
            print "Message timestamp: " + str(timestamp) 
            print "My clock value: " + str(mycontext['logClock'])        
        
        if timestamp > mycontext['logClock']:
            #If the other nodes timestamp is higher than our logical clock, synchronize the clocks and add one
            if mycontext['reporting']:
                print "Synch our clocks"
            mycontext['logClock'] = timestamp + 1
            
            
        elif timestamp == mycontext['logClock']:
            #If they are equal, just increase our clock
            if mycontext['reporting']:
                print "Just increase clock"
            mycontext['logClock'] = mycontext['logClock'] + 1
            
    #Else, we did the POST and do not need to check the timestamp, just increase it
    else:
        #Increase our logical clock by one when sending a message
        if mycontext['reporting']:
            print "We POSTed, just increase our clock"
        mycontext['logClock'] = mycontext['logClock'] + 1
      
    if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Exited function updateLogClock()***\n\n"   
# Add a new message to our messagelist
def updateMsgList(lastMessage):
    if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Entered function updateMsgList()***\n\n"
    
    if lastMessage == '':
        return
    
    mycontext['msgList'].append((mycontext['logClock'], lastMessage))
    if mycontext['reporting']:
        print "Appended value to msgList: " + lastMessage + "\n"  
    
    if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Exited function updateMsgList()***\n\n"
    
# Print the list of messages
def printMsgList():
    
    print "\n========================================="
    print "Current msgList:\n"
    
    for entry in mycontext['msgList']:
        print "Timestamp == " + str(entry[0])
        print "Message   == " + entry[1] + ""
        
    print "=========================================\n" 
    
# Will try and cancel ongoing timers before they trigger and set new ones.
# Is called each time we receive an update from one of the nodes
def setTimers():
    #mycontext['lock'].acquire()
    # Try to cancel the eventualConsistencyTimer, then start a new one
    try:
        #Cancel the previous timer and start a new one
        if(canceltimer(mycontext['eventualConsistencyTimer'])):
            print "Successfully canceled EC timer!"
        else:
            print "Couldn't cancel EC timer"
    except:
        print "Problem with EC timer"  
        
    mycontext['eventualConsistencyTimer'] = settimer(5, eventual_consistency, ())
# ------------------------------------------------------------------------------    
# Called when an incoming message is received. 
# --> Important starting point
# ------------------------------------------------------------------------------    
def board_connection_handler(ip, port, sockobj, thiscommhandle, listencommhandle):
  if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Entered function main()***"

  #msgHeader will contain the string we received in the message coming in on the recently established connection
  msgheader = ""

  try:
    msgheader = sockobj.recv(1024) # Receive message
    print '****Request:\n%s' % msgheader
    if mycontext['reporting']:
        print "Received HTTP-message: \n" + httpHeader

    # Choosing the types of communication and reacting according to each processing type behaviour 
    if msgheader.startswith( 'POST' ):
        
        msgToPost = mycontext['msg'].split('<StartOfMsg>').pop()
        #This function will perform the local write on the vessel and propagate the update for the neighboring vessels 
        Post_Handler(msgheader, sockobj, thiscommhandle)
              
        updateMsgList(msgToPost)
        updateLogClock("")
        htmlresponse = generate_html_page() # To generate an html page which is  eventually consistent 

    elif msgheader.startswith( 'GET' ):
      updateAllClocks()
      #This function is defined below and it basically generate an html by calling the generate_html_page 
      GET_Handler(msgheader, sockobj, thiscommhandle)
    elif msgheader.startswith( 'ADD' ):
      #This function is defined below and it basically call the add_entry function so that entries will be inserted with a dynamic ID
      ADD_Handler(msgheader, sockobj, thiscommhandle)
    elif msgheader.startswith( 'MODIFY' ):
      #As it defines below this function will call the update_entry fumction so that the specific entry will be updated with a new value 
      MODIFY_Handler(msgheader, sockobj, thiscommhandle)
    elif msgheader.startswith( 'DELETE' ):
      #This function will delete a specific entry by using its ID after calling the finction delete_entry_byid 
      DELETE_Handler(msgheader, sockobj, thiscommhandle)
    elif msgheader.startswith('<clockValue>'):
        otherClock = int(msgheader.replace("<clockValue>", ""))
        compareClocks(otherClock)
    else:
      #If we receive the update from different vessel
      updateMsgList(msgheader)
      updateLogClock(msgheader)        
        
        #Update our message
      mycontext['msg'] += msgheader
        
        #Set our timers each time we receive a message
      setTimers()
      other_requests_handler(msgheader, sockobj, thiscommhandle)

   # Handling an exception error if something unexpected cames up  
  except Exception, e:
    print "Exception in board: %s, %s\n" %(type(e), e)
    #raise
    if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Finished function main()\n\n***"

# ------------------------------------------------------------------------------
# Handles initial GET request from browser, outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def GET_Handler(msgheader, sockobj, thiscommhandle):
  htmlresponse = generate_html_page()
  res=make_http_response(200, 'OK', htmlresponse)
  sockobj.send(res)
  stopcomm(thiscommhandle) 

# ------------------------------------------------------------------------------
# Handles POST requests outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def Post_Handler(msgheader, sockobj, thiscommhandle):
  # Extracting a query from the entry template 
  query = extract_http_request_contents(msgheader)
  print '****Query:\n%s\n' % query
  # extracting the query parameters so that it can identify the type of query 
  parameters = extract_parameters_from_query(query)
  print '****Parameters:\n%s\n' % parameters
  msgToPost=parameters['entry']
  
  #Display the user for the confirmation of the inserted entry and close the connection so that other vessls can post an entry
  res=make_http_response(200, 'OK', 'You have successfully posted an entry')
  sockobj.send(res)
  stopcomm(thiscommhandle)
  
  # Incase of a new entry we add it to the board with an ID
  if msgheader.startswith( 'POST /board' ):
    add_entry(msgToPost)
    send_to_neighbors('ADD entry=%s' % msgToPost)
    updateMsgList(msgToPost)
    updateLogClock("")
    printMsgList()
    htmlresponse = generate_html_page()
    res=make_http_response(200,'OK', htmlresponse)
    sockobj=send(res)
  # Incase of update or delete we need an entry ID that needs to be updated or deleted 
  elif msgheader.startswith( 'POST /entries' ):
    entry_id = extract_id_from_post(msgheader)
    print 'id=%s' %(entry_id)
    delete_p = parameters['delete']
    # If the pointer have a value 1 the delete command will be applied 
    if delete_p == '1':
      delete_entry_by_id(entry_id)
      send_to_neighbors('DELETE id=%s&entry=%s' % (entry_id, msgToPost))
      updateMsgList(msgToPost)
      updateLogClock("")
      printMsgList()
    else:
      # If the pointer have a value different thaan 1 the update or modify command will be applied 
      modify_entry(entry_id, msgToPost)
      send_to_neighbors('MODIFY id=%s&entry=%s' % (entry_id, msgToPost))
      updateMsgList(msgToPost)
      updateLogClock("")
      printMsgList()
  #Displaying the results     
  print('\n')

# ------------------------------------------------------------------------------
# Handles ADD requests outputs nothing and closes socket.
# ------------------------------------------------------------------------------
def ADD_Handler(msgheader, sockobj, thiscommhandle):
  # Before calling the function add_entry the 
  query = msgheader.split(' ')[1]
  print '****Query:\n%s\n' % query
  # extract the query parameters
  parameters = extract_parameters_from_query(query)
  print '****Parameters:\n%s\n' % parameters
  msgToPost=parameters['entry']
  # Add an entry with the extracted paramenters 
  add_entry(msgToPost)
  stopcomm(thiscommhandle)

# ------------------------------------------------------------------------------
# Handles MODIFY requests outputs nothing and closes socket.
# ------------------------------------------------------------------------------
def MODIFY_Handler(msgheader, sockobj, thiscommhandle):
  # extract query
  query = msgheader.split(' ')[1]
  print '****Query:\n%s\n' % query
  # extract the query parameters
  parameters = extract_parameters_from_query(query)
  print '****Parameters:\n%s\n' % parameters
  id_p = parameters['id']
  msgToPost = parameters['entry']
  # apply
  modify_entry(id_p, msgToPost)
  stopcomm(thiscommhandle)

# ------------------------------------------------------------------------------
# Handles MODIFY requests outputs nothing and closes socket.
# ------------------------------------------------------------------------------
def DELETE_Handler(msgheader, sockobj, thiscommhandle):
  # extract query
  query = msgheader.split(' ')[1]
  print '****Query:\n%s\n' % query
  # extract the query parameters
  parameters = extract_parameters_from_query(query)
  print '****Parameters:\n%s\n' % parameters
  id_p = parameters['id']
  msgToPost = parameters['entry']
  # warning if mismatching id and entry value
  if mycontext['entry_dictionnary'][int(id_p)] != msgToPost:
    print 'warning : mismatching id and entry given. id=%s, entry=%s' % (id_p, msgToPost)
  # apply
  delete_entry_by_id(id_p)
  stopcomm(thiscommhandle)

# ------------------------------------------------------------------------------
# Handles other requests from browser, outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def other_requests_handler(msgheader, sockobj, thiscommhandle):
  # extract the query from the HTTP request  
  query = extract_http_request_contents(msgheader)
  print query
  # extract the query parameters
  parameters = extract_parameters_from_query(query)
  print 'handled by default handler'
  
  # build error answer
  template=my_context['entry_template']
  htmlresponse = template % ("404 Not Found\n" + msgheader)
  res=make_http_response(404, 'Not Found', htmlresponse)
  sockobj.send(res)
  stopcomm(thiscommhandle) 

# ------------------------------------------------------------------------------
# Add a new entry to the list
# Input : Entry (string)
# ------------------------------------------------------------------------------
def add_entry(msg):
  entry_dictionnary = mycontext['entry_dictionnary']
  msgid = id_generator()
  new_entry = msg
  entry_dictionnary[msgid] = new_entry
  mycontext['entry_dictionnary'] = entry_dictionnary
  
# ------------------------------------------------------------------------------
# Modify an entry
# Input : Id of the entry to replace, and replacement entry (string)
# ------------------------------------------------------------------------------
def modify_entry(id, replacement):
  entry_dictionnary = mycontext['entry_dictionnary']
  entry_dictionnary[int(id)] = replacement
  mycontext['entry_dictionnary'] = entry_dictionnary

# ------------------------------------------------------------------------------
# Delete an entry
# Input : Id of the entry to delete
# ------------------------------------------------------------------------------
def delete_entry_by_id(id):
  entry_dictionnary = mycontext['entry_dictionnary']
  del entry_dictionnary[int(id)]
  mycontext['entry_dictionnary'] = entry_dictionnary

# ------------------------------------------------------------------------------
# Send a message to all neighbors
# Input : request to transfer
# ------------------------------------------------------------------------------
def send_to_neighbors(msg):
  try:
        #read the list of IP from the file neignborlist.txt file 
        for line in file("neighborlist.txt","r"):
          #avoid sending the msg to yourself
          if line.strip() != mycontext['ip']:
            #try to send the message to other servers
            socket1 = openconn(line.strip(),63178)
            socket1.send(msg)
            socket1.close()
  except Exception, e:
          print "Send message fail: %s, %s\n" %(type(e), e)
# ------------------------------------------------------------------------------
# Generates a new ID. In a separate function in case we want to change it later.
# ------------------------------------------------------------------------------
def id_generator():
  id_count = mycontext['id_count']
  new_id = id_count
  id_count +=1
  mycontext['id_count'] = id_count
  return new_id

# ------------------------------------------------------------------------------
# Wrap into HTTP headers
# ------------------------------------------------------------------------------
def make_http_response(status, status_text, htmlresponse):
    response_template = "HTTP/1.1 %d %s\r\nContent-type: text/html\r\nContent-length: %i\r\n\r\n%s"
    return response_template % (status, status_text, len(htmlresponse), htmlresponse)

# ------------------------------------------------------------------------------
# Utility function to extract the contents (payload) from HTTP request
# ------------------------------------------------------------------------------
def extract_http_request_contents(header):
  # find content length
  content_length = header.split('Content-Length: ')[1]
  content_length = int(content_length.split('\r\n')[0])
  
  # extract the http response body and discard the header
  contents = header[-content_length:]
  return contents

# ------------------------------------------------------------------------------
# Utility function to extract query parameter from HTML query
# ------------------------------------------------------------------------------
def extract_parameters_from_query(msg):
  # extract the query parameters as a dictionary: {name:value}
  # example input format: comment=aa&ip=127.0.0.1&port=63178&action=Delete
  parameters={}
  arr = msg.split('&')
  for a in arr:
    pp = a.split('=')
    if len(pp)>1:
      parameters[pp[0]] = pp[1]
  return parameters

# ------------------------------------------------------------------------------
# Utility function to extract id of entry from HTML post query
# ------------------------------------------------------------------------------
def extract_id_from_post(query):
  return (query.split('POST /entries/'))[1].split(' ')[0]
  
# ------------------------------------------------------------------------------
# Outputs the blackboard html 
# ------------------------------------------------------------------------------   
def generate_html_page():
  #Initialize blackboard content
  
  # retrieve entries from global variable
  if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Entered function buildHTML()***"
  entry_dictionnary = mycontext['entry_dictionnary']
  entries = ""
  newMessage = ""
  for key, value in entry_dictionnary.iteritems():
    entries = entries + (mycontext['entry_template'] %('entries/%d' % (key), key, value))
  # dynamic title showing Ip address, port and up time. 
  title='Group DS 19 Board @ %s:%d. Up time: %d' %( str(mycontext['ip']), mycontext['port'], int(getruntime()) )
  logClock='My Current Clock: %s' %str(mycontext['logClock'])
  content = mycontext['boardcontents_template'] %( title, entries)
  fullpage_h = mycontext['frontpage_header_template'] + content
  fullpage = logClock + '<br>' + fullpage_h + mycontext['frontpage_footer_template'] % mycontext['authors']
  #print entries, content, fullpage
  if mycontext['reporting']:
        print "At <" + str(getruntime()) + "> ***Finished function buildHTML()\n\n***"
  return fullpage
  
# ------------------------------------------------------------------------------    
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens a socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  mycontext['reporting'] = False
    
  if mycontext['reporting']:
      print "At <" + str(getruntime()) + "> ***STARTING initialization***"
    
  # whenever this vessel gets a connection on its IP:port it'll call function board_connection_handler
  if len(callargs) == 1 or len(callargs) == 2:
    port = int(callargs[0])
    if len(callargs) == 2:
      ip=str(callargs[1])
    else:
      try:
        ip = getmyip()
      except Exception, e:
        print "Could not get an IP\n"
        print (type(e), e)
        raise
  
  # Fail if we don't have 1 or 2 arguments  
  else:
    raise Exception("Usage: python <path to repy.py> <path to restrictions.default> skeleton2016.repy <port> [ip (optional)]")

 
    #Create a lock to be used for Mutual Exclusion.
    #Before altering global variables, we want to acquire() a lock.
  mycontext['lock'] = getlock()
    
    #Initialize global variables
  mycontext['msg'] = ""
  #Create a (hopefully) unique ID for each vessel, ranging between 0 and 999999.
  mycontext['vesselID'] = int(randomfloat()*1000000)
    
  #Will be our logical clock that is updated for every message
  mycontext['logClock'] = 0
    
  #The list containing messages. Contains tuples with timestamps and messages.
  mycontext['msgList'] = []
    
  #Will keep track of at what time we did our last swap, for measuring purposes
  mycontext['lastSwap'] = 0.0
    
  mycontext['port'] = port

  mycontext['ip'] = ip
  
  #Initialize entry list & id generator
  mycontext['entry_dictionnary'] = dict()
  mycontext['id_count'] = 0
  
  #retrieve neighbors in neighborlist.txt
  neighbors_file = open("neighborlist.txt", "r")
  neighbors = neighbors_file.read().splitlines()
  neighbors_file.close()
  mycontext['neighbors'] = neighbors
  
  #We are reading and assigning a name for html files that are used by the blackboard 
  mycontext['entry_template'] = file("entry_template.html").read()
  mycontext['boardcontents_template'] = file("boardcontents_template.html").read()
  mycontext['frontpage_header_template'] = file("board_frontpage_header_template.html").read()
  mycontext['frontpage_footer_template'] = file("board_frontpage_footer_template.html").read()
  
  # The Authors who code this DS and displayed on the footer 
  mycontext['authors'] = "Surafel M. Alamneh and Anusha Balabhadrapatruni"

  start_board()

  if mycontext['reporting']:
      print "At <" + str(getruntime()) + "> ***FINISHED initialization***\n\n"

